

def solve(formula: BooleanFormula) -> bool:
    remaining = variables_in(formula)
    if remaining.isEmpty(): 
        return simplify(formula)
    else:
        branch = remaining[0]
        true_result = solve(substitute(formula, branch, True))
        if true_result:    # same as last version
            return True    # but allow early termination
        else: 
            false_result = solve(substitute(formula, branch, False))
            return false_result    

x1 
!x4
!x2
x3 
(x1 or ... or x100)











def solve(formula: Set[Clause]) -> bool:
    old_formula, formula = propagate_unit_clauses(formula)
    while formula != old_formula:
        old_formula, formula = propagate_unit_clauses(formula)
    if EmptyClause in formula: return False
    elif formula == units_in(formula): return True
    else:
        branch = remaining[0]
        if solve(formula + {branch}): return True
        else:  return solve(formula + {!branch})


def solve(formula: Set[Clause]) -> Map[Int, Bool] | False: